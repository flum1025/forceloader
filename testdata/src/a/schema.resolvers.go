package a

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input NewTodo) (*Todo, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga()

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga()
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga()
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil {
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil {
	}

	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*Todo, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga()

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga()
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga()
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil {
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil {
	}
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Text is the resolver for the text field.
func (r *todoResolver) Text(ctx context.Context, obj *Todo) (string, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga() // want `UseCase cannot be used in todoResolver`

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga() // want `UseCase cannot be used in todoResolver`
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga() // want `UseCase cannot be used in todoResolver`
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil { // want `UseCase cannot be used in todoResolver`
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil { // want `UseCase cannot be used in todoResolver`
	}
	panic(fmt.Errorf("not implemented: Text - text"))
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *Todo) (*User, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga() // want `UseCase cannot be used in todoResolver`

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga() // want `UseCase cannot be used in todoResolver`
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga() // want `UseCase cannot be used in todoResolver`
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil { // want `UseCase cannot be used in todoResolver`
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil { // want `UseCase cannot be used in todoResolver`
	}
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
