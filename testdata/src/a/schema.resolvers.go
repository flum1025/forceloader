package a

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"a/usecase"
	"context"
	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input NewTodo) (*Todo, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga()

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga()
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga()
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil {
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil {
	}

	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*Todo, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga()

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga()
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga()
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil {
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil {
	}

	r.nestFunc()
	nestFuncForQueryResolver(r, r.UseCase)

	panic(fmt.Errorf("not implemented: Todos - todos"))
}

func (r *queryResolver) nestFunc() {
	r.UseCase.Fuga()
}

func nestFuncForQueryResolver(r *queryResolver, usecase usecase.UseCase) {
	r.UseCase.Fuga()
	usecase.Fuga()
}

// Text is the resolver for the text field.
func (r *todoResolver) Text(ctx context.Context, obj *Todo) (string, error) {
	r.Loader.Hoge()
	r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.Text`

	err := r.Loader.Hoge()
	if err != nil {
	}
	err2 := r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.Text`
	if err2 != nil {
	}

	var err3 error
	err3 = r.Loader.Hoge()
	err3 = r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.Text`
	if err3 != nil {
	}

	if err := r.Loader.Hoge(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil { // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.Text`
	}

	if r.Loader.Hoge() != nil {
	}
	if r.UseCase.Fuga() != nil { // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.Text`
	}

	return "", r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.Text`
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *Todo) (*User, error) {
	//nolint:forceloader
	r.UseCase.Fuga()
	// nolint:forceloader
	r.UseCase.Fuga()
	// nolint: forceloader
	r.UseCase.Fuga()
	//nolint:forceloader,hoge
	r.UseCase.Fuga()
	// nolint:forceloader,hoge
	r.UseCase.Fuga()
	// nolint: forceloader,hoge
	r.UseCase.Fuga()
	//  nolint:forceloader
	r.UseCase.Fuga()
	// nolint:  forceloader
	r.UseCase.Fuga()
	r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.User`

	r.UseCase.Fuga() //nolint:forceloader
	r.UseCase.Fuga() // nolint:forceloader
	r.UseCase.Fuga() // nolint: forceloader
	r.UseCase.Fuga() //nolint:forceloader,hoge
	r.UseCase.Fuga() // nolint:forceloader,hoge
	r.UseCase.Fuga() // nolint: forceloader,hoge
	r.UseCase.Fuga() //  nolint:forceloader
	r.UseCase.Fuga() // nolint:  forceloader
	r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.User`

	(func() {
		//nolint:forceloader
		r.UseCase.Fuga()
		r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a\.todoResolver\).User\$1`
	})()

	nestFuncForTodoResolver(r, r.UseCase)
	r.nestFunc()

	//nolint:forceloader
	err1 := r.UseCase.Fuga()
	if err1 != nil {
	}
	err2 := r.UseCase.Fuga() //nolint:forceloader
	if err2 != nil {
	}

	var err3 error
	//nolint:forceloader
	err3 = r.UseCase.Fuga()
	if err3 != nil {
	}
	err3 = r.UseCase.Fuga() //nolint:forceloader
	if err3 != nil {
	}

	//nolint:forceloader
	if err := r.UseCase.Fuga(); err != nil {
	}
	if err := r.UseCase.Fuga(); err != nil { //nolint:forceloader
	}

	//nolint:forceloader
	if r.UseCase.Fuga() != nil {
	}
	if r.UseCase.Fuga() != nil { //nolint:forceloader
	}

	return nil, r.UseCase.Fuga() //nolint:forceloader
}

func nestFuncForTodoResolver(r *todoResolver, usecase usecase.UseCase) {
	//nolint:forceloader
	r.UseCase.Fuga()
	r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in a\.nestFuncForTodoResolver`

	//nolint:forceloader
	usecase.Fuga()
	usecase.Fuga() // want `r\.UseCase\.Fuga cannot be used in a\.nestFuncForTodoResolver`
}

func (r *todoResolver) nestFunc() {
	//nolint:forceloader
	r.UseCase.Fuga()
	r.UseCase.Fuga() // want `r\.UseCase\.Fuga cannot be used in \(\*a.todoResolver\)\.nestFunc`
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
